{"version":3,"sources":["busyness-listing.js","App.js","About.js","router.js","serviceWorker.js","index.js"],"names":["BusynessMeter","react_default","a","createElement","className","this","props","place","busyness_listing_BusynessGraph","data","Component","defaultOptions","responsive","legend","display","scales","xAxes","ticks","fontColor","gridLines","color","drawOnChartArea","type","yAxes","BusynessGraph","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","labels","datasets","label","fill","lineTension","borderColor","borderCapStyle","borderDash","borderJoinStyle","pointHoverBorderWidth","pointRadius","pointHitRadius","map","x","es","width","height","options","locations","Underground Food Court","Memorial Student Center","Sbisa Dining Hall","App","key","stores","_this2","fetch_data","timerID","setInterval","_this3","location","fetch","then","res","json","result","console","log","setState","error","clearInterval","_this4","allStores","push","busyness_listing","About","href","Index","id","src_App_0","AboutPage","src_About","AppRouter","BrowserRouter","Link","to","Route","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adfdf37c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Line} from 'react-chartjs-2';\n\n\nclass BusynessMeter extends Component {\n  render() {\n    //const status = this.props.place + ' is: ' + (this.props.data ? this.props.data : \"Offline\");\n    //{this.props.data} Minutes in line.\n    return (\n      <div className=\"store-row\">\n        <div className=\"store-info\">\n          <div className=\"store-name\">\n          {this.props.place}\n          </div>\n        </div>\n        <BusynessGraph data={this.props.data}/>\n      </div>\n    );\n  }\n}\n\n\nconst defaultOptions = {\n    responsive: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        ticks:{\n          fontColor: \"#fff\"\n        },\n        gridLines: {\n          color: \"#fff\",\n          drawOnChartArea: false\n        },\n        type: 'time'\n      }],\n      yAxes: [{\n        ticks:{\n        \tdisplay: false,\n        },\n        \n        gridLines: {\n        \tdisplay: false,\n          color: \"#fff\",\n          drawOnChartArea: false\n        },\n\n      }],\n    }\n  }\n\nclass BusynessGraph extends Component {\n\n  constructor() {\n    super();\n\n    \n    this.state = {\n          data: {\n      labels: [] ,\n      datasets: [\n        {\n          label: 'Title',\n          fill: false,\n          lineTension: 0.1,\n          borderColor: 'rgba(255,255,255,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderJoinStyle: 'miter',\n          pointHoverBorderWidth: 0,\n          pointRadius: 0,\n          pointHitRadius: 0,\n          data: []\n        }\n\n      ]\n    }\n    }\n  }\n\n  render() {\n\n\n  const data = {\n      labels: this.props.data.map(x => x[0]),\n      datasets: [\n        {\n          fill: false,\n          lineTension: 0.1,\n          borderColor: 'rgba(255,255,255,0)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderJoinStyle: 'miter',\n          pointHoverBorderWidth: 0,\n          pointRadius: 0,\n          pointHitRadius: 0,\n          data: this.props.data.map(x => x[1])\n        },\n        {\n          label: 'Title',\n          fill: false,\n          lineTension: 0.1,\n          borderColor: 'rgba(255,255,255,0.5)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderJoinStyle: 'miter',\n          pointHoverBorderWidth: 0,\n          pointRadius: 0,\n          pointHitRadius: 0,\n          data: this.props.data.map(x => x[1])\n        }\n\n      ]\n    }\n    return (\n    <div className=\"graph\">\n      <Line data={data} width={220} height={120} options={defaultOptions} />\n    </div>\n    );\n  }\n}\n\nexport default BusynessMeter;","import React, { Component } from 'react';\n//import socketIOClient from \"socket.io-client\";\nimport {Line} from 'react-chartjs-2';\nimport BusynessMeter from './busyness-listing';\n\n\n//Dict location names:api name\nconst locations = {'Underground Food Court':'underground', 'Memorial Student Center':'msc', 'Sbisa Dining Hall':'sdh'}\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n    this.state = {\n      stores: {}\n    }\n    for(var key in locations){\n      this.state.stores[key] = []\n    }\n\n\t}\n\n  componentDidMount() {\n    \n    this.fetch_data()\n    //database fetch interval\n    this.timerID = setInterval(\n      () => this.fetch_data(),\n      5000\n    );\n    //OLD socketIO data\n    // const { endpoint } = this.state;\n    // const socket = socketIOClient(endpoint);\n\n    // socket.on(\"updateState\", data => {\n    //   const stores = this.state.stores;\n    //   stores[data.store] = data.devices;\n    //   this.setState({stores: stores})\n    //   this.state.stores[data.store] = data.devices;\n    // });\n  }\n\n  fetch_data() {\n\n\n        for(var location in locations){\n      //API request and display name are dependant on same thing.\n\n      fetch(\"http://localhost:4001/api/\" + locations[location])\n      .then(res => res.json())\n      .then((result) => {\n        console.log(result)\n        const stores = this.state.stores;\n        stores[location] = result;\n        this.setState({stores: stores});\n      },\n      (error) => {console.log(error)});\n  }\n}\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    //const { response } = this.state;\n    const stores = () => {\n      let allStores = []\n\n      for (var key in this.state.stores){\n        allStores.push(<BusynessMeter place={key} data={this.state.stores[key]} />)\n      }\n      return (allStores);\n    }\n\n    return (\n      <div className=\"stores\">\n\t       \n        {stores()}\n      </div>\n      \n    );\n  }\n}\n\n\nexport default App;\n","import React, { Component } from 'react';\n\nconst About = () => (\n\t<div>\n\t<h1>Welcome</h1>\n\t<p>Aggie Eats is a project I built to learn react along with other web tools. Find its source code on github <a href=\"https://www.github.com/donahuea\">here.</a></p>\n\t</div>\n\t)\nexport default About;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport App from './App';\nimport About from './About';\n\nconst Index = () => <div id=\"content\"><App /></div>;\nconst AboutPage = () =>  <div id=\"content\"><About /></div>;\n\n\nconst AppRouter = () => (\n  <Router>\n    <div>\n      <div className=\"navbar-container\">\n        <nav className=\"navbar\">\n         <div className=\"navbar-name\">\n          <h1>\n            Aggies Eats\n            </h1>\n          </div>  \n          <div className=\"navbar-links\">\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/about/\">About</Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        </div>\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/about/\" component={AboutPage} />\n    </div>\n  </Router>\n);\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport AppRouter from './router'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}